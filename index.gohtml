<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>zprof</title>
	<style>
		body                   { font: 16px/1.5em sans-serif; color: #252525; padding: 1em; background-color: #eee; }
		h1                     { text-align: center; margin: 0; margin-bottom: 1em; }
		h2                     { margin: 0 0 .5em .3em; font-size: 1.5em; }
		table                  { border-collapse: collapse;  }
		th, td                 { padding: .4em; border-bottom: 1px solid #d4d4d4; vertical-align: top; }
		th                     { text-align: left; font-weight: normal; }
		a, button              { background: transparent; border: none; color: #00f; cursor: pointer; text-decoration: none;
		                         font-size: 1rem; transition: color .2s; padding: 0; }
		button[disabled]       { color: #252525; }
		a:hover, button:hover  { text-decoration: underline; color: #6491ff; }
		button[disabled]:hover { color: #252525; text-decoration: none; cursor: default; }
		.box                   { padding: 1em; margin-bottom: 2em; background-color: #fff; box-shadow: 0 0 6px rgba(0,0,0,.2); }
		input                  { max-width: 5em; }

		#pprof-opt             { display: flex; flex-wrap: wrap; margin-left: .5em; }
		#pprof-opt > div:not(:first-child) { margin-left: 2em; }
		#pprof-tbl             { display: flex; flex-wrap: wrap; margin-top: .5em; }
		#pprof-tbl div         { width: 16em; padding: 1em; margin: .25em; background-color: #fff; box-shadow: 0 0 6px rgba(0,0,0,.2); }
		#pprof-btm             { margin: .5em 0 2em .5em; }

		#setrate               { display: flex; flex-wrap: wrap; align-items: start; }
		#setrate div           { flex-basis: 100%; height: 1em; }
		#setrate label         { width: 11em; }
		#setrate span          { max-width: 40em; margin-left: 1em; }

		#metrics tr:hover      { background-color: #f7f7f7; }
		.col-nw                { white-space: nowrap; }
		.col-val               { padding: .4em 2em; }
	</style>
</head>

<body>
<h1>zprof</h1>

<h2>pprof</h2>
<div id="pprof">
	{{if not .hasGo}}<p class="box"><strong>Notice:</strong> no <code>go</code> binary in PATH; reporting options are more limited.</p>{{end}}

	<form method="get" action="{{$.prefix}}">
		<div id="pprof-opt">
			<div>
				<label for="seconds">Seconds to profile for:</label>
				<input type="number" name="seconds" id="seconds" value="{{.seconds}}" {{if eq .report "dbg"}}disabled{{end}}>
			</div>
			<div>
				<span>Show as:</span>
				<label><input type="radio" name="report" value="bin" {{if eq .report "bin"}}checked{{end}}> Download profile</label>
				{{/*
				<label><input type="radio" name="report" value="dbg" {{if eq .report "dbg"}}checked{{end}}> Debug</label>
				*/}}
				{{if $.hasGo}}
				<label><input type="radio" name="report" value="traces" {{if eq .report "traces"}}checked{{end}}> Traces</label>
				<label><input type="radio" name="report" value="top" {{if eq .report "top"}}checked{{end}}> Top</label>
				<label><input type="radio" name="report" value="svg" {{if eq .report "svg"}}checked{{end}}> SVG</label>
				{{end}}
			</div>
		</div>

		<div id="pprof-tbl">
			{{range $p := .profiles}}
				<div>
					<button name="page" value="{{$p.Name}}" {{if $p.Disabled}}disabled{{end}}>{{$p.Name}}</button>
					{{if gt $p.Count -1}} ({{$p.Count}}){{end}}<br>
					{{$p.Desc}}
					{{if $p.Disabled}}<strong>Disabled</strong>: requires setting the profile rates.{{end}}
				</div>
			{{end}}
			<div>
				<a href="{{.prefix}}/goroutine?report=dbg&debug=2">goroutine stack dump</a>
			</div>
		</div>
	</form>
</div>

<p id="pprof-btm">Additional reading:
	<a href="https://blog.golang.org/2011/06/profiling-go-programs.html">Profiling Go Programs</a>
	| <a href="https://software.intel.com/content/www/us/en/develop/blogs/debugging-performance-issues-in-go-programs.html">Debugging performance issues in Go* programs</a>
	| <a href="https://github.com/google/pprof/blob/master/doc/README.md#interpreting-the-callgraph">Interpreting the Callgraph</a>
</p>

<h2>Profile rates</h2>
<div class="box">
	<form id="setrate" method="post" action="{{.prefix}}/setrate">
		<label for="block">Block profile rate</label>
		<input type="text" name="block" id="block" value="{{.blockRate}}">
		<span>Sampling rate in nanoseconds; Use 1 to include every blocking
			event, and 0 to turn off profiling.<br><br>
			 Every event with a duration &gt;= rate will be tracked. For events
			 with a duration &lt; rate, the profiler will randomly sample
			 duration / rate events. E.g. if you have an event with a duration
			 of 100ns and your rate is 1000ns, there is a 10% chance it will be
			 tracked by the block profiler.</span>
		<div></div>

		<label for="mutex">Mutex profile</label>
		<input type="text" name="mutex" id="mutex" value="{{.mutexRate}}">
		<span>Sampling rate; use 1 to include every blocking event, and 0 to
			turn off profiling. On average 1/rate events are reported.</span>
		<div></div>

		<input type="submit" value="Set">
	</form>
</div>

<h2>Metrics</h2>
<div class="box">
	<table id="metrics"><tbody>
	{{range $m := .metrics}}
		<tr>
			<td class="col-nw">{{$m.Name}}</td>
			<td class="col-nw col-val">{{$m.Value}}</td>
			<td>{{$m.Desc}}</td>
		</tr>
	{{end}}
	</tbody></table>
</div>

<script>
	// Parse all query parameters from string to {k: v} object.
	var split_query = function(s) {
		s = s.substr(s.indexOf('?') + 1);
		if (s.length === 0)
			return {};

		var split = s.split('&'),
			obj = {};
		for (var i = 0; i < split.length; i++) {
			var item = split[i].split('=');
			obj[item[0]] = decodeURIComponent(item[1]);
		}
		return obj;
	}

	// Join query parameters from {k: v} object to href.
	var join_query = function(obj) {
		var s = [];
		for (var k in obj)
			s.push(k + '=' + encodeURIComponent(obj[k]));
		return (s.length === 0 ? '/' : ('?' + s.join('&')));
	}

	// Set one query parameter – leaving the others alone – without reloading the page.
	var replace_query = function(params) {
		var current = split_query(location.search)
		for (var k in params) {
			if (params[k] === null)
				delete current[k]
			else
				current[k] = params[k]
		}
		history.replaceState(null, '', join_query(current))
	}
</script>
<script>
	var r = document.getElementsByName('report')
	for (var i = 0; i < r.length; i++) {
		r[i].addEventListener('change', function() {
			replace_query({report: this.value})
			seconds.disabled = this.value === 'dbg'
		})
	}

	window.seconds.addEventListener('change', function() {
		replace_query({seconds: this.value})
	})

	// TODO: load profiles with ajax, so we can do stuff like putting two of them side-by-side.
</script>
</body>
</html>
